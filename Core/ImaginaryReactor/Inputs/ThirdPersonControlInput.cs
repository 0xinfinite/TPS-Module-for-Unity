//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.imaginaryreactor.tps-module-for-unity/Core/ImaginaryReactor/Inputs/ThirdPersonControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ImaginaryReactor
{
    public partial class @ThirdPersonControlInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ThirdPersonControlInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ThirdPersonControlInput"",
    ""maps"": [
        {
            ""name"": ""Jumper"",
            ""id"": ""b23cab7f-8d3a-4a61-8a5e-f01eed207a86"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a84adca7-0c09-45b0-8b93-50b741ebbf25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b0eca894-3b9d-489f-ac1f-c74298619a6c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""a121b7a2-ee56-4373-9b76-fc86b068ba38"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""580cf759-f8d4-408a-8557-d4dea22a0313"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""584bd13b-82c9-43f7-a560-8ce6e1b0876a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchView"",
                    ""type"": ""Button"",
                    ""id"": ""26a146ec-739b-468f-b885-5168a322f4dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowRelease"",
                    ""type"": ""Value"",
                    ""id"": ""bd95b0fc-9575-456b-9a71-7b396f0120e7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1f7aef7-08db-4c9d-b193-2aadce097a0d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e39398d-cb94-42c5-a92a-abedc944d2d6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33cd42f7-df13-4f84-a203-0dda17337388"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6b76961-044b-453d-b7da-c0440f5659fb"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Hold(duration=0.002,pressPoint=0.001)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e003992-949f-483f-8ba1-fc8e8d608dad"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46c93130-e794-4144-b3c8-bf572606748d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press(pressPoint=0.001,behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30cff7c1-01d0-4a2f-9dde-ac9871d7a440"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Jumper
            m_Jumper = asset.FindActionMap("Jumper", throwIfNotFound: true);
            m_Jumper_Move = m_Jumper.FindAction("Move", throwIfNotFound: true);
            m_Jumper_Look = m_Jumper.FindAction("Look", throwIfNotFound: true);
            m_Jumper_Fire = m_Jumper.FindAction("Fire", throwIfNotFound: true);
            m_Jumper_ADS = m_Jumper.FindAction("ADS", throwIfNotFound: true);
            m_Jumper_Jump = m_Jumper.FindAction("Jump", throwIfNotFound: true);
            m_Jumper_SwitchView = m_Jumper.FindAction("SwitchView", throwIfNotFound: true);
            m_Jumper_ThrowRelease = m_Jumper.FindAction("ThrowRelease", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Jumper
        private readonly InputActionMap m_Jumper;
        private List<IJumperActions> m_JumperActionsCallbackInterfaces = new List<IJumperActions>();
        private readonly InputAction m_Jumper_Move;
        private readonly InputAction m_Jumper_Look;
        private readonly InputAction m_Jumper_Fire;
        private readonly InputAction m_Jumper_ADS;
        private readonly InputAction m_Jumper_Jump;
        private readonly InputAction m_Jumper_SwitchView;
        private readonly InputAction m_Jumper_ThrowRelease;
        public struct JumperActions
        {
            private @ThirdPersonControlInput m_Wrapper;
            public JumperActions(@ThirdPersonControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Jumper_Move;
            public InputAction @Look => m_Wrapper.m_Jumper_Look;
            public InputAction @Fire => m_Wrapper.m_Jumper_Fire;
            public InputAction @ADS => m_Wrapper.m_Jumper_ADS;
            public InputAction @Jump => m_Wrapper.m_Jumper_Jump;
            public InputAction @SwitchView => m_Wrapper.m_Jumper_SwitchView;
            public InputAction @ThrowRelease => m_Wrapper.m_Jumper_ThrowRelease;
            public InputActionMap Get() { return m_Wrapper.m_Jumper; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JumperActions set) { return set.Get(); }
            public void AddCallbacks(IJumperActions instance)
            {
                if (instance == null || m_Wrapper.m_JumperActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_JumperActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @ADS.started += instance.OnADS;
                @ADS.performed += instance.OnADS;
                @ADS.canceled += instance.OnADS;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @SwitchView.started += instance.OnSwitchView;
                @SwitchView.performed += instance.OnSwitchView;
                @SwitchView.canceled += instance.OnSwitchView;
                @ThrowRelease.started += instance.OnThrowRelease;
                @ThrowRelease.performed += instance.OnThrowRelease;
                @ThrowRelease.canceled += instance.OnThrowRelease;
            }

            private void UnregisterCallbacks(IJumperActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Fire.started -= instance.OnFire;
                @Fire.performed -= instance.OnFire;
                @Fire.canceled -= instance.OnFire;
                @ADS.started -= instance.OnADS;
                @ADS.performed -= instance.OnADS;
                @ADS.canceled -= instance.OnADS;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @SwitchView.started -= instance.OnSwitchView;
                @SwitchView.performed -= instance.OnSwitchView;
                @SwitchView.canceled -= instance.OnSwitchView;
                @ThrowRelease.started -= instance.OnThrowRelease;
                @ThrowRelease.performed -= instance.OnThrowRelease;
                @ThrowRelease.canceled -= instance.OnThrowRelease;
            }

            public void RemoveCallbacks(IJumperActions instance)
            {
                if (m_Wrapper.m_JumperActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IJumperActions instance)
            {
                foreach (var item in m_Wrapper.m_JumperActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_JumperActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public JumperActions @Jumper => new JumperActions(this);
        public interface IJumperActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnADS(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnSwitchView(InputAction.CallbackContext context);
            void OnThrowRelease(InputAction.CallbackContext context);
        }
    }
}
